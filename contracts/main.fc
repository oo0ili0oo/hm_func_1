#include "imports/stdlib.fc";

global slice admin_address;
global slice receiver_address;

const op::withdrawal = 0x6d2d3b45;
const op::accept_funds = 0xa4d8086f;

() save_data() impure inline {
    set_data(
        begin_cell()
            .store_slice(receiver_address)
            .store_slice(admin_address)
        .end_cell()
    );
}

() load_data() impure inline {
    slice ds = get_data().begin_parse();
    receiver_address = ds~load_msg_addr();
    admin_address = ds~load_msg_addr();
    ds.end_parse();
}

() withdrawal(int amount, slice to, int mode) impure inline_ref {
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .end_cell();
    send_raw_message(msg, mode);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
     }

     slice sender = cs~load_msg_addr();

     int op = in_msg_body~load_uint(32);

    load_data();

    if (op == op::accept_funds) {
        throw_unless(98, msg_value >= 2000000000);
        return ();
    }

    if (op == op::withdrawal) {
        throw_unless(99, equal_slices(sender, admin_address));
        throw_unless(101, my_balance > 500000000);
        withdrawal(my_balance - 500000000, sender, 1);
        return ();
     }
     throw(0xffff);
}
